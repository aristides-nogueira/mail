{"version":3,"sources":["config/firebase.js","components/Feedback/index.js","components/Feedback/style.js","components/Result/index.js","components/Result/style.js","components/Form/index.js","components/Form/style.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","SuccessFeedback","style","paddingTop","color","fontSize","FailedFeedback","classes","name","date","studentEmail","useState","contactEmail","setContactEmail","contactPhone","setContactPhone","complete","setComplete","className","feedbackForm","formControl","TextField","label","variant","value","formField","onChange","e","target","Button","onClick","collection","add","success","withStyles","theme","main","display","flexDirection","padding","spacing","width","inputedName","inputedDate","Grid","container","direction","justify","alignItems","result","margin","email","fontWeight","fontStyle","password","copyIcon","cursor","paddingLeft","feedback","justifyContent","borderColor","backgroundColor","birthDate","setSuccess","setCopy","relevantNames","toLowerCase","normalize","replace","split","filter","n","includes","namePart","map","i","length","join","datePart","format","Date","text","onCopy","href","startIcon","form","box","initialTip","errorMessage","setName","setBirthDate","confirm","setConfirm","validated","setValidated","Box","boxShadow","error","match","utils","DateFnsUtils","locale","ptLocale","DatePicker","autoOk","disableFuture","inputVariant","openTo","Header","paddingBottom","AppBar","position","Toolbar","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8ea03e25.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAD2nlqnNZfUtGaV_Z6Ta_eB55N27-6jrM\",\n  authDomain: \"classroom-emails.firebaseapp.com\",\n  databaseURL: \"https://classroom-emails.firebaseio.com\",\n  projectId: \"classroom-emails\",\n  storageBucket: \"classroom-emails.appspot.com\",\n  messagingSenderId: \"932392480727\",\n  appId: \"1:932392480727:web:2c5303bf16a92a6a85a592\",\n  measurementId: \"G-ZERZV8Q07P\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core';\nimport style from './style';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport firebase from '../../config/firebase';\nimport Grid from '@material-ui/core/Grid';\n\nconst db = firebase.firestore();\n\nconst Feedback = ({\n  success,\n  inputedName,\n  inputedDate,\n  studentEmail,\n  classes\n}) => {\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <div className={classes.main}>\n        {\n          success\n          ? <SuccessFeedback />\n          : <FailedFeedback\n            classes={classes}\n            name={inputedName}\n            date={inputedDate}\n            studentEmail={studentEmail}\n          />\n        }\n      </div>\n    </Grid>\n  );\n}\n\nconst SuccessFeedback = () => {\n  return <div style={{ paddingTop: 8 }}>\n    Ficamos felizes que tenha coseguido! Boas aulas!\n    <div>\n      <span style={{ color: 'white', fontSize: 6 }}>#gratidão</span>\n    </div>\n  </div>\n};\n\nconst FailedFeedback = ({ classes, name, date, studentEmail }) => {\n  const [contactEmail, setContactEmail] = useState('');\n  const [contactPhone, setContactPhone] = useState('');\n  const [ complete, setComplete ] = useState(false);\n\n  return <div>\n    <p>\n      Caso tenha logado, mas não apareceu a turma do aluno, certifique-se que <br />\n      fez o acesso com a conta correta  <br />\n      (não irá aparecer caso esteja com seu email pessoal,  <br />\n      o acesso deve ser feito com o email e senha  acima)\n    </p>\n    <p>\n      Se mesmo assim, não deu certo, por favor, nos deixe seu  <br />\n      email e telefone para contato.  <br />\n      A equipe de suporte da EMEI Aristides entrará em contato com você!\n    </p>\n    <div className={classes.feedbackForm}>\n      <div className={classes.formControl}>\n        <TextField\n          label=\"Email para contato\"\n          variant=\"outlined\"\n          value={contactEmail}\n          className={classes.formField}\n          onChange={(e) => {\n            setContactEmail(e.target.value)\n          }}\n          />\n      </div>\n      <div className={classes.formControl}>\n        <TextField\n          label=\"Telefone para contato\"\n          variant=\"outlined\"\n          value={contactPhone}\n          className={classes.formField}\n          onChange={(e) => {\n            setContactPhone(e.target.value)\n          }}\n        />\n      </div>\n      <div className={classes.feedbackForm}>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => {\n            db.collection(\"contacts\").add({\n              name,\n              date,\n              studentEmail,\n              contactEmail,\n              contactPhone,\n              success: false\n            });\n            setComplete(true);\n          }}\n        >\n          Solicitar contato\n        </Button>\n        {\n          complete && <span style={{ paddingTop: 8 }}>\n            Em breve entraremos em contato!\n          </span>\n        }\n      </div>\n    </div>\n  </div>\n};\n\nexport default withStyles(style)(Feedback);\n","export default (theme) => ({\n  main: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  feedbackForm: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(2, 0),\n  },\n  formControl: {\n    padding: theme.spacing(2, 0),\n  },\n  formField: {\n    width: '100%',\n  },\n});\n","import React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core';\nimport style from './style';\nimport { format } from 'date-fns';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Button from '@material-ui/core/Button';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport Feedback from '../Feedback';\nimport firebase from '../../config/firebase';\n\nconst db = firebase.firestore();\n\nconst Result = ({\n  name,\n  classes,\n  birthDate\n}) => {\n  const [ success, setSuccess ] = useState(null);\n  const [ copy, setCopy ] = useState(false);\n\n  const lowerCaseName = name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  const splitName = lowerCaseName.split(' ');\n  const relevantNames = splitName.filter((n) => ![ 'da', 'do', 'das', 'dos', '' ].includes(n));\n  const formattedName = relevantNames.map((n, i) => {\n    if (i === 0 || i === relevantNames.length - 1) {\n      return n;\n    }\n\n    return n[0];\n  });\n  const namePart = formattedName.join('');\n  const datePart = format(new Date(birthDate), 'ddMMyyyy');\n  const studentEmail = `${namePart}.${datePart}@edu.sme.prefeitura.sp.gov.br`;\n\n  return (\n    <div className={classes.result}>\n      <p>Seu email é</p>\n      <p className={classes.email}>\n        {studentEmail}\n        <CopyToClipboard text={studentEmail} onCopy={() => setCopy(true)}>\n          <FileCopyIcon className={classes.copyIcon} />\n        </CopyToClipboard>\n      </p>\n      <p>\n        e a senha inicial é\n        <span className={classes.password}>12345678 </span>\n        e precisa ser alterada no primeiro acesso.\n      </p>\n      <p>\n        <a href='https://classroom.google.com/' target='_blank'>Clique aqui para acessar o Google Classroom</a>, por favor, <br />\n        não esqueça de responder logo abaixo se você conseguiu ou não<br />\n        acessar sem problemas, para que possamos ajudar quem estiver<br />\n        com dificuldades!\n      </p>\n      <div className={classes.feedback} style={{\n        display: (success != null ? 'none' : 'inherit')\n      }}>\n        <Button\n          variant='contained'\n          className={classes.success}\n          onClick={() => {\n            setSuccess(true);\n            db.collection(\"contacts\").add({\n              name,\n              date: datePart,\n              studentEmail,\n              success: true\n            });\n          }}\n          startIcon={<ThumbUpIcon />}\n          >\n          Consegui!\n        </Button>\n        <Button\n          variant='contained'\n          color='secondary'\n          onClick={() => {\n            setSuccess(false);\n          }}\n          startIcon={<ThumbDownIcon />}\n        >\n          Não consegui!\n        </Button>\n      </div>\n      {\n        success != null &&\n        <Feedback\n          success={success}\n          inputedName={name}\n          inputedDate={datePart}\n          studentEmail={studentEmail}\n        />\n      }\n    </div>\n  );\n}\n\nexport default withStyles(style)(Result);\n","export default (theme) => ({\n  result: {\n    display: 'flex',\n    flexDirection: 'column',\n    paddingTop: theme.spacing(4),\n    '& p': {\n      margin: 0,\n      paddingTop: theme.spacing(2),\n    }\n  },\n  email: {\n    fontWeight: 'bold',\n    fontStyle: 'italic',\n  },\n  password: {\n    fontWeight: 'bold',\n    fontStyle: 'italic',\n  },\n  copyIcon: {\n    cursor: 'pointer',\n    paddingLeft: theme.spacing(1)\n  },\n  feedback: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  success: {\n    borderColor: '#4caf50 !important',\n    backgroundColor: '#4caf50 !important',\n  }\n});\n","import React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core';\nimport style from './style';\nimport TextField from '@material-ui/core/TextField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport ptLocale from \"date-fns/locale/pt-BR\";\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Result from '../Result';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport {\n  DatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\n\nconst Form = ({\n  classes\n}) => {\n  const [ name, setName ] = useState('');\n  const [ birthDate, setBirthDate ] = useState(new Date('2015-01-02'));\n  const [ confirm, setConfirm ] = useState(false);\n  const [ validated, setValidated ] = useState(false);\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <span className={classes.initialTip}>\n        Saiba como acessar a sua sala de aula via Google classroom!\n      </span>\n      <div className={classes.form}>\n        <Box boxShadow={3} className={classes.box}>\n          {\n            !confirm ?\n            <>\n              <span>Descubra seu acesso:</span>\n              <div className={classes.formControl}>\n                <TextField\n                  label=\"Nome Completo do aluno\"\n                  variant=\"outlined\"\n                  value={name}\n                  error={validated && name === ''}\n                  className={classes.formField}\n                  onChange={(e) => {\n                    const value = e.target.value.replace(/[^A-zÀ-ú`´~^\\s]/gi, '')\n                    if (value.match(/[a-zA-Zâãàáêéèíìôóòõúù`´~^]/g) || value === '') {\n                      setName(value)\n                    }\n                  }}\n                />\n              </div>\n              <div className={classes.formControl}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptLocale}>\n                  <DatePicker\n                    autoOk\n                    disableFuture\n                    variant=\"inline\"\n                    inputVariant=\"outlined\"\n                    openTo=\"year\"\n                    label=\"Data de Nascimento\"\n                    format=\"dd 'de' MMMM/yyyy\"\n                    className={classes.formField}\n                    value={birthDate}\n                    onChange={setBirthDate}\n                  />\n                </MuiPickersUtilsProvider>\n              </div>\n              <div>\n                <Button\n                  variant='contained'\n                  color=\"primary\"\n                  onClick={() => {\n                    setValidated(true);\n                    if (name) {\n                      setConfirm(true);\n                    }\n                  }}\n                >\n                  Pegar Acesso\n                </Button>\n              </div>\n              <div className={classes.errorMessage}>\n                {\n                  validated && name === '' && <span>\n                    Por favor, todos os campos devem ser preenchidos\n                  </span>\n                }\n              </div>\n            </>\n            : <Button\n                variant='contained'\n                color=\"primary\"\n                startIcon={<ReplayIcon />}\n                onClick={() => {\n                  setConfirm(false);\n                  setValidated(false);\n                }}\n              >\n                Tentar Outra vez\n              </Button>\n          }\n\n        </Box>\n      </div>\n      {\n        confirm && <Result name={name} birthDate={birthDate} />\n      }\n    </Grid>\n  );\n}\n\nexport default withStyles(style)(Form);\n","export default (theme) => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  box: {\n    padding: theme.spacing(4, 5)\n  },\n  initialTip: {\n    padding: theme.spacing(1, 0),\n    fontSize: '1.2em'\n  },\n  formControl: {\n    padding: theme.spacing(4, 0),\n  },\n  formField: {\n    width: '100%',\n  },\n  errorMessage: {\n    paddingTop: theme.spacing(1)\n  }\n});\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst Header = ({\n}) => {\n  return (\n    <div style={{ paddingBottom: 20 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          Aristides Nogueira\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ fontSize: 20, color: '#555' }}>\n      <Header />\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}