{"version":3,"sources":["components/Form/index.js","components/Form/style.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","formControl","padding","spacing","result","paddingTop","classes","useState","name","setName","Date","dtNascimento","setDtNascimento","relevantNames","toLowerCase","normalize","replace","split","filter","n","includes","formattedName","map","i","length","Grid","container","direction","justify","alignItems","style","display","flexDirection","Box","boxShadow","p","className","TextField","label","variant","value","size","onChange","e","target","utils","DateFnsUtils","locale","ptLocale","DatePicker","autoOk","disableFuture","hideTabs","openTo","format","join","Header","paddingBottom","AppBar","position","Toolbar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAiFeA,eCjFA,SAACC,GAAD,MAAY,CACzBC,YAAa,CACXC,QAASF,EAAMG,QAAQ,EAAG,IAE5BC,OAAQ,CACNC,WAAYL,EAAMG,QAAQ,OD4EfJ,EAnEF,SAAC,GAEP,IADLO,EACI,EADJA,QACI,EACsBC,mBAAS,IAD/B,mBACIC,EADJ,KACUC,EADV,OAEsCF,mBAAS,IAAIG,KAAK,eAFxD,mBAEIC,EAFJ,KAEkBC,EAFlB,KAMEC,EAFgBL,EAAKM,cAAcC,UAAU,OAAOC,QAAQ,mBAAoB,IACtDC,MAAM,KACNC,QAAO,SAACC,GAAD,OAAQ,CAAE,KAAM,KAAM,MAAO,MAAO,IAAKC,SAASD,MACnFE,EAAgBR,EAAcS,KAAI,SAACH,EAAGI,GAC1C,OAAU,IAANA,GAAWA,IAAMV,EAAcW,OAAS,EACnCL,EAGFA,EAAE,MAIX,OACE,kBAACM,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAEX,yBAAKC,MAAO,CACVC,QAAS,OACTC,cAAe,WAEf,kBAACC,EAAA,EAAD,CAAKC,UAAW,EAAGC,EAAG,GACpB,yBAAKC,UAAW9B,EAAQL,aACtB,kBAACoC,EAAA,EAAD,CACEC,MAAM,yBACNC,QAAQ,WACRC,MAAOhC,EACPiC,KAAK,MACLC,SAAU,SAACC,GACTlC,EAAQkC,EAAEC,OAAOJ,WAIvB,yBAAKJ,UAAW9B,EAAQL,aACtB,oDACA,6BACA,kBAAC,IAAD,CAAyB4C,MAAOC,IAAcC,OAAQC,KACpD,kBAACC,EAAA,EAAD,CACEC,QAAQ,EACRC,eAAe,EACfC,UAAU,EACVb,QAAQ,SACRc,OAAO,OACPC,OAAO,oBACPd,MAAO7B,EACP+B,SAAU9B,OAKlB,yBAAKwB,UAAW9B,EAAQF,QACtB,uCACA,wCAAUiB,EAAckC,KAAK,IAA7B,YAAoCD,YAAO,IAAI5C,KAAKC,GAAe,YAAnE,wC,0BEvDK6C,EAbA,SAAC,GAEd,OADK,eAEH,yBAAK1B,MAAO,CAAE2B,cAAe,KAC3B,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,8BCGOC,MATf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.04aa3038.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core';\nimport style from './style';\nimport TextField from '@material-ui/core/TextField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport ptLocale from \"date-fns/locale/pt-BR\";\nimport { format } from 'date-fns';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport {\n  DatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\n\nconst Form = ({\n  classes\n}) => {\n  const [ name, setName ] = useState('');\n  const [ dtNascimento, setDtNascimento ] = useState(new Date('2015-01-02'));\n\n  const lowerCaseName = name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  const splitName = lowerCaseName.split(' ');\n  const relevantNames = splitName.filter((n) => ![ 'da', 'do', 'das', 'dos', '' ].includes(n));\n  const formattedName = relevantNames.map((n, i) => {\n    if (i === 0 || i === relevantNames.length - 1) {\n      return n;\n    }\n\n    return n[0];\n  });\n\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column'\n      }}>\n        <Box boxShadow={3} p={7}>\n          <div className={classes.formControl}>\n            <TextField\n              label=\"Nome Completo do aluno\"\n              variant=\"outlined\"\n              value={name}\n              size='big'\n              onChange={(e) => {\n                setName(e.target.value)\n              }}\n            />\n          </div>\n          <div className={classes.formControl}>\n            <span>Data de Nascimento</span>\n            <br />\n            <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptLocale}>\n              <DatePicker\n                autoOk={true}\n                disableFuture={true}\n                hideTabs={false}\n                variant=\"dialog\"\n                openTo=\"year\"\n                format=\"dd 'de' MMMM/yyyy\"\n                value={dtNascimento}\n                onChange={setDtNascimento}\n              />\n            </MuiPickersUtilsProvider>\n          </div>\n        </Box>\n        <div className={classes.result}>\n          <div>Email:</div>\n          <span>{`${formattedName.join('')}.${format(new Date(dtNascimento), 'ddMMyyyy')}@edu.sme.prefeitura.sp.gov.br`}</span>\n        </div>\n      </div>\n    </Grid>\n  );\n}\n\nexport default withStyles(style)(Form);\n","export default (theme) => ({\n  formControl: {\n    padding: theme.spacing(4, 0),\n  },\n  result: {\n    paddingTop: theme.spacing(4),\n  },\n});\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst Header = ({\n}) => {\n  return (\n    <div style={{ paddingBottom: 20 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          Aristides Nogueira\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}